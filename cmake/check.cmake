# Compilers:
#
# - COMPILER_GCC                    - GNU compiler (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
# - COMPILER_CLANG                  - Clang-compatible compiler (CMAKE_CXX_COMPILER_ID MATCHES "Clang" - Clang or AppleClang, see CMP0025)
# - COMPILER_ICC                    - Intel compiler
# - COMPILER_MSVC                   - MSVC, Microsoft Visual Compiler (CMake variable)
# - COMPILER_MINGW COMPILER_CYGWIN  - MINGW / CYGWIN / CMAKE_COMPILER_IS_MINGW / CMAKE_COMPILER_IS_CYGWIN (CMake original variables)
#
# CPU Platforms String:
# - X86                                     - world wide architecture, u know who, x86 or amd64
# - ARM                                     - Advanced RISC Machine architecture, a.k.a ARM architecture
# - PPC64                                   - PowerPC
# - PPC64LE                                 - PowerPC Little Edition
# - MIPS                                    - Million Instructions Per Second architecture, a.k.a MIPS architecture
#
# OS:
# - SYSTEM_WINDOWS                  - Windows |  MinGW
# - SYSTEM_LINUX                    -  Linux  | Android
# - SYSTEM_ANDROID                  - Android
# - SYSTEM_IOS                      -   iOS
# - SYSTEM_APPLE    - MacOSX | iOS
# - SYSTEM_OHOS                     - Harmony OS


# check target cpu
IF (SKIP_TARGET_PROCESSOR_CHECK)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
    SET (TARGET_PROCESSOR        "X86"   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE    CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*")
    SET (TARGET_PROCESSOR        "X86"   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  TRUE    CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  FALSE   CACHE INTERNAL "" FORCE)
ELSEIF ((IOS AND CMAKE_OSX_ARCHITECTURES MATCHES "arm") OR (CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)") OR (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*|ARM64.*)"))
    SET (TARGET_PROCESSOR        "ARM"   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE    CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")
    SET (TARGET_PROCESSOR        "ARM"   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  TRUE    CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  FALSE   CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64le")
    SET (TARGET_PROCESSOR        "PPCLE" CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE    CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
    SET (TARGET_PROCESSOR        "PPC"   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE    CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips.*|MIPS.*|mips64.*)")
    SET (TARGET_PROCESSOR        "MIPS"  CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE   CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE    CACHE INTERNAL "" FORCE)
ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "^(rv64.*|RV64.*|riscv64.*)")
    SET (TARGET_PROCESSOR        "lp64dv" CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_32Bit  FALSE    CACHE INTERNAL "" FORCE)
    SET (TARGET_PROCESSOR_64Bit  TRUE     CACHE INTERNAL "" FORCE)
ELSE()
    IF (NOT SUPPRESS_TARGET_PROCESSOR_CHECK)
        MESSAGE (WARNING "TENGINE: Unrecognized target processor configuration. " ${CMAKE_SYSTEM_PROCESSOR})
    ENDIF()
ENDIF()


# Workaround for 32-bit operating systems on x86_64
IF ((CMAKE_SIZEOF_VOID_P EQUAL 4) AND (TARGET_PROCESSOR MATCHES "X86") AND (NOT FORCE_BUILD_X86_64))
    IF (NOT SUPPRESS_TARGET_PROCESSOR_CHECK)
        MESSAGE (WARNING "TENGINE: 32Bit target OS is detected. Assume 32-bit compilation mode.")
    ENDIF()
    IF (TARGET_PROCESSOR_64Bit)
        SET (TARGET_PROCESSOR_64Bit  FALSE   CACHE INTERNAL "" FORCE)
        SET (TARGET_PROCESSOR_32Bit  TRUE    CACHE INTERNAL "" FORCE)
    ENDIF()
ENDIF()

# Workaround for 32-bit operating systems on aarch64 processor
IF ((CMAKE_SIZEOF_VOID_P EQUAL 4) AND (TARGET_PROCESSOR MATCHES "ARM") AND (NOT FORCE_BUILD_AARCH64))
    IF (NOT SUPPRESS_TARGET_PROCESSOR_CHECK)
        MESSAGE (STATUS "TENGINE: 32Bit target OS is detected. Assume 32-bit compilation mode.")
    ENDIF()
    IF (TARGET_PROCESSOR_64Bit)
        SET (TARGET_PROCESSOR_32Bit  TRUE    CACHE INTERNAL "" FORCE)
        SET (TARGET_PROCESSOR_64Bit  FALSE   CACHE INTERNAL "" FORCE)
    ENDIF()
ENDIF()



# Check which compiler
# GCC, the GNU Compiler Collection
IF (NOT DEFINED COMPILER_GCC AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    SET (COMPILER_GCC   TRUE CACHE INTERNAL "" FORCE)
ENDIF()

# Clang, C Language Family Frontend for LLVM
IF(NOT DEFINED COMPILER_CLANG AND CMAKE_CXX_COMPILER_ID MATCHES "Clang")  # Clang or AppleClang (see CMP0025)
    SET (COMPILER_CLANG TRUE CACHE INTERNAL "" FORCE)
ENDIF()

# ICC, Intel C++ Compiler
IF (UNIX)
    IF     (__ICL)
        SET (COMPILER_ICC   __ICL                   CACHE INTERNAL "" FORCE)
    ELSEIF (__ICC)
        SET (COMPILER_ICC   __ICC                   CACHE INTERNAL "" FORCE)
    ELSEIF (__ECL)
        SET (COMPILER_ICC   __ECL                   CACHE INTERNAL "" FORCE)
    ELSEIF (__ECC)
        SET (COMPILER_ICC   __ECC                   CACHE INTERNAL "" FORCE)
    ELSEIF (__INTEL_COMPILER)
        SET (COMPILER_ICC   __INTEL_COMPILER)
    ELSEIF (CMAKE_C_COMPILER MATCHES "icc")
        SET (COMPILER_ICC   icc_matches_c_compiler  CACHE INTERNAL "" FORCE)
    ENDIF()
ENDIF()

IF (MSVC AND CMAKE_C_COMPILER MATCHES "icc|icl")
    SET (COMPILER_ICC  __INTEL_COMPILER_FOR_WINDOWS CACHE INTERNAL "" FORCE)
ENDIF()

# MSVC, Microsoft Visual C++ Compiler
IF (MSVC)
    SET (COMPILER_MSVC      TRUE CACHE INTERNAL "" FORCE)
ENDIF()

# MinGW, Minimalist GNU for Windows
IF (MINGW OR CMAKE_COMPILER_IS_MINGW)
    SET (COMPILER_GCC       TRUE CACHE INTERNAL "" FORCE)
    SET (COMPILER_MINGW     TRUE CACHE INTERNAL "" FORCE)
ENDIF()

# Cygwin
IF (CYGWIN OR CMAKE_COMPILER_IS_CYGWIN)
    SET (COMPILER_GCC       TRUE CACHE INTERNAL "" FORCE)
    SET (COMPILER_CYGWIN    TRUE CACHE INTERNAL "" FORCE)
ENDIF()



# check system
IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET (SYSTEM     "Windows"           CACHE INTERNAL "" FORCE)
ELSEIF(UNIX AND NOT APPLE)
    IF(CMAKE_SYSTEM_NAME MATCHES "Android")
        SET (SYSTEM "Android"           CACHE INTERNAL "" FORCE)
    ELSEIF(OHOS)
        SET (SYSTEM "Harmony OS"        CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
        SET (SYSTEM "Linux"             CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*")
        SET (SYSTEM "FreeBSD"           CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "DragonFly.*|FreeBSD")
        SET (SYSTEM "FreeBSD"           CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
        SET (SYSTEM "NetBSD"            CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
        SET (SYSTEM "OpenBSD"           CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "SYSV5.*")
        SET (SYSTEM "System V"          CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Solaris.*")
        SET (SYSTEM "Solaris"           CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "HP-UX.*")
        SET (SYSTEM "HP-UX"             CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "AIX.*")
        SET (SYSTEM "AIX"               CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Minix.*")
        SET (SYSTEM "Minix"             CACHE INTERNAL "" FORCE)
    ENDIF()
ELSEIF(APPLE)
    IF(CMAKE_SYSTEM_NAME MATCHES ".*Darwin.*")
        SET (SYSTEM "Darwin"            CACHE INTERNAL "" FORCE)
    ELSEIF(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
        SET (SYSTEM "MacOS"             CACHE INTERNAL "" FORCE)
    ELSE()
        SET (SYSTEM "Apple"             CACHE INTERNAL "" FORCE)
    ENDIF()
ENDIF ()



# Check C/C++ standard support
INCLUDE (CheckLanguage)
INCLUDE (CheckCCompilerFlag)
INCLUDE (CheckCXXCompilerFlag)

# C99 is the base required standard
SET (CMAKE_C_STANDARD 99)
SET (CMAKE_C_STANDARD_REQUIRED TRUE)
SET (CMAKE_C_EXTENSIONS ON)

# Try to enable C11 standard
IF (USE_LASTEST_C_STANDARD OR USE_LASTEST_STANDARD)
    CHECK_C_COMPILER_FLAG ("-std=c11" ENV_HAS_C11)

    IF (ENV_HAS_C11)
        SET (CMAKE_C_STANDARD 11)
    ENDIF()
ENDIF()



SET (CMAKE_CXX_STANDARD_REQUIRED TRUE)
SET (CMAKE_CXX_EXTENSIONS OFF)

# Try to enable C++14 standard
IF (USE_LASTEST_CXX_STANDARD OR USE_LASTEST_STANDARD)
    CHECK_CXX_COMPILER_FLAG ("-std=c++14" ENV_HAS_CXX14)

    IF (ENV_HAS_CXX14)
        SET (CMAKE_CXX_STANDARD 14)
    ENDIF()

    CHECK_CXX_COMPILER_FLAG ("-std=c++17" ENV_HAS_CXX17)
ENDIF()
